package com.dahuangit.seobi.analyzer.service.impl;

import java.io.IOException;
import java.util.ArrayList;
import java.util.Date;
import java.util.List;

import org.apache.log4j.Logger;
import org.dom4j.DocumentException;
import org.dom4j.Element;
import org.dom4j.Node;
import org.springframework.beans.factory.annotation.Autowired;
import org.springframework.transaction.annotation.Transactional;

import com.dahuangit.seobi.analyzer.dao.RelatedSearchKeyDao;
import com.dahuangit.seobi.analyzer.entry.RelatedSearchKey;
import com.dahuangit.seobi.analyzer.service.AnalyzeService;
import com.dahuangit.seobi.analyzer.util.BaiduUtils;
import com.dahuangit.seobi.receiver.dao.QQTalkMsgDao;
import com.dahuangit.seobi.receiver.entry.QQTalkMsg;
import com.dahuangit.util.NumberUtils;
import com.dahuangit.util.SortUtils;
import com.dahuangit.util.log.Log4jUtils;
import com.dahuangit.util.xml.XpathUtils;

@Transactional
public class AnalyzeServiceImpl implements AnalyzeService {

	private static final Logger log = Log4jUtils.getLogger(AnalyzeServiceImpl.class);

	/** 百度搜索字数 */
	private static final int BAIDU_SEARCH_KEY_COUNT = 38;

	/** 百度分段搜索中，最后一段字数小于该值则不在计算本小段的原创度 */
	private static final int BAIDU_LAST_SECTION_MIN_LENGTH = 4;

	@Autowired
	private QQTalkMsgDao qqTalkMsgDao = null;

	@Autowired
	private RelatedSearchKeyDao relatedSearchKeyDao = null;

	/**
	 * 分析本系统数据库表中qq说说的百度原创度
	 */
	public void analyzeShuoshuoBaiduOriginatyPercent() {
		// 搜索所有未搜索过的说说信息
		List<QQTalkMsg> notSearchedList = this.qqTalkMsgDao.getAllNotAnalyzedQQTalkMsg();

		for (QQTalkMsg msg : notSearchedList) {
			String content = msg.getTalkContent();
			double originalityPercent = getBaiduOriginarityPercent(content, msg);

			// 保存说说信息(无需手动保存，系统会自动保存)
			msg.setAnalyzed(true);
			msg.setAnalyzeTime(new Date());
			msg.setOriginalityPercent(originalityPercent);
		}
	}

	/**
	 * 获取百度原创度
	 * 
	 * @param content
	 */
	public double getBaiduOriginatyPercent(String content) {
		return this.getBaiduOriginarityPercent(content, null);
	}

	/**
	 * 获取百度原创度
	 * 
	 * @param content
	 * @param msg
	 * @return
	 */
	private double getBaiduOriginarityPercent(String content, QQTalkMsg msg) {
		double averageSimilaryCount = (double) 0;
		double shuoshuoOriginatyPercent = (double) 0;

		try {
			log.debug("正在通过百度搜索说说内容,说说内容为:[" + content + "]");

			// 如果说说内容没有超长
			if (content.length() < BAIDU_SEARCH_KEY_COUNT) {
				averageSimilaryCount = saveKeyAndCountSectionSimilarity(content, msg);
				// 如果搜索的内容大于百度要求的搜索字数，则分段搜索
			} else {
				double d = (double) content.length() / (double) BAIDU_SEARCH_KEY_COUNT;
				int sectionCount = (int) Math.ceil(d);

				// 遍历每一小段
				List<Double> list = new ArrayList<Double>();
				for (int i = 1; i <= sectionCount; i++) {
					String key = content.substring((i - 1) * BAIDU_SEARCH_KEY_COUNT, BAIDU_SEARCH_KEY_COUNT - 1);

					if (key.length() < BAIDU_LAST_SECTION_MIN_LENGTH) {
						continue;
					}

					averageSimilaryCount = saveKeyAndCountSectionSimilarity(key, msg);
					list.add(averageSimilaryCount);
				}

				// 得到每一小段说说的平均相似度
				averageSimilaryCount = SortUtils.getAverage(list);
			}

			double shuoshuoSimilaryPercent = averageSimilaryCount / (double) BAIDU_SEARCH_KEY_COUNT;
			shuoshuoOriginatyPercent = 1 - shuoshuoSimilaryPercent;

			log.debug("说说:[" + content + "]相似度为：[" + NumberUtils.number2percent(shuoshuoSimilaryPercent) + "]");
			log.debug("说说:[" + content + "]原创度为：[" + NumberUtils.number2percent(shuoshuoOriginatyPercent) + "]");
			log.debug("说说:[" + content + "]原创度分析完毕!");
		} catch (Exception e) {
			log.error("通过百度搜索说说内容时发生错误，说说内容为:[" + content + "],跳过本条记录，继续执行后面的记录");
			e.printStackTrace();
		}

		return shuoshuoOriginatyPercent;
	}

	/**
	 * 计算百度每一小段的相似度
	 * 
	 * @param sectionStr
	 * @param msg
	 * @return
	 * @throws IOException
	 * @throws DocumentException
	 */
	private double saveKeyAndCountSectionSimilarity(String sectionStr, QQTalkMsg msg) throws IOException,
			DocumentException {

		String result = BaiduUtils.searchByKey(sectionStr);

		// 保存关联搜索关键字
		String startStr = "<div id=\"rs\">";
		String endStr = "id=\"page\"";
		int start = result.indexOf(startStr);
		int end = result.indexOf(endStr);

		if (null != msg) {
			saveKey(result, msg);
		}

		// 搜索返回条目
		startStr = "<div class=\"nums\">";
		endStr = "<div id=\"rs\">";
		start = result.indexOf(startStr) + startStr.length();
		end = result.indexOf(endStr);

		String searchResult = result.substring(start, end);
		startStr = "</div>";
		start = searchResult.indexOf(startStr) + startStr.length();

		searchResult = searchResult.substring(start);
		searchResult = searchResult.replaceAll("&", "");
		searchResult = searchResult.replaceAll("data-nolog", "");
		searchResult = "<div>" + searchResult + "</div>";

		String searchResultxpathExpression = "div[1]/div";
		List<Node> results = XpathUtils.findNodes(searchResult, searchResultxpathExpression);

		// 遍历一段的每一个结果
		List<Double> list = new ArrayList<Double>();
		for (Node n : results) {
			double d = resultItemSimilarityCount(n);
			list.add(d);
		}

		double average = SortUtils.getAverage(list);

		return average;
	}

	/**
	 * 计算每条结果的相似度
	 * 
	 * @param shuoshuoContent
	 * @param resultNode
	 * @return
	 * @throws DocumentException
	 */
	private Double resultItemSimilarityCount(Node resultItemNode) throws DocumentException {

		Element e = (Element) resultNode;

		double average = 0;

		// 查询出每个结果中飘红内容
		String searchResultxpathExpression = "//em";
		String resultItemStr = e.asXML();
		List<Node> emNodes = XpathUtils.findNodes(resultItemStr, searchResultxpathExpression);

		if (null != emNodes && emNodes.size() > 0) {
			List<Double> continuousTxtCountList = new ArrayList<Double>();

			for (int i = 0; i < emNodes.size(); i++) {
				Node em = emNodes.get(i);
				String emText = em.getText();
				continuousTxtCountList.add((double) emText.length());
			}

			// 取飘红内容长度的最小的一个
			average = SortUtils.getAverage(continuousTxtCountList);
		}

		return average;
	}

	private void saveKey(String result, QQTalkMsg msg) throws DocumentException {
		// 保存关联搜索关键字
		String startStr = "<div id=\"rs\">";
		String endStr = "id=\"page\"";
		int start = result.indexOf(startStr);
		int end = result.indexOf(endStr);

		String relatedSearchStr = result.substring(start, end);

		startStr = "<div id=\"rs\"><div class=\"tt\">相关搜索</div>";
		endStr = "</div><p";
		start = relatedSearchStr.indexOf(startStr) + startStr.length();
		end = relatedSearchStr.indexOf(endStr);
		relatedSearchStr = relatedSearchStr.substring(start, end);

		relatedSearchStr = relatedSearchStr.replaceAll("&", "");
		relatedSearchStr = relatedSearchStr.replaceAll("</tr></table>", "</table>");

		String xpathExpression = "//tr//th//a";
		List<Node> nodes = XpathUtils.findNodes(relatedSearchStr, xpathExpression);

		for (Node n : nodes) {
			String content = n.getText();
			RelatedSearchKey relatedSearchKey = new RelatedSearchKey();
			relatedSearchKey.setQqTalkMsg(msg);
			relatedSearchKey.setRelatedSearchKey(content);
			relatedSearchKeyDao.add(relatedSearchKey);

			log.debug("相关搜索关键字保存，关键字:[" + content + "]");
		}
	}

}
